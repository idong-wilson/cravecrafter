How to get the code working on your computer:

== GITHUB ==

FORKING A PROJECT (copying to your own device):

1. Create fork clicking button (on github.com/project-you-want-to-fork)
2. in your terminal, navigate to where you want the folder to be created
   
   git clone <url-from-the-fork-not-from-the-original> 

(connection to local machine from fork is then called "origin")

3. cd into that folder /cravecrafter (you could also restart vscode just with that folder just in case)
4. open it up into vscode (" code . " )
5. start venv:
    python3 -m venv my_venv
        note ^ if python3 doesn't work, try python. I need python3 since I use a Mac 
    . my_venv/bin/activate 
6. install dependencies:
    pip3 install -r requirements.txt 
        note ^ if pip3 doesn't work, use pip 
7. *make edits*
then UPDATING LIFECYCLE to get to commit, regular terminal COMMANDS (use origin)

    1. git add . (. means all, could just upload one file, would put <filename>)
    2. git commit -m "my message goes here" (first message is usually "first commit")
    3. git push <remote_name> <branch> (git push origin master/main) * we want to use origin / main
                origin         main
    4. IDONG: make sure pull request has been completed on github

BASIC PROCESS:

IDONG:
    ADDING A FILE: 
    1. git add .
    2. git commit -m "<message>"
    3. git push origin main
    4. make sure pull request is done on IDONG's github

    PULLING FROM GITHUB AFTER AN UPDATE HAS BEEN MADE:
    git pull upstream main

    ***dont forget to sync fork, on github***


SIMON:
    ADDING A FILE: 
    1. git add .
    2. git commit -m "<message>"
    3. git push origin main

    PULLING FROM GITHUB AFTER AN UPDATE HAS BEEN MADE:
    git pull origin main

=========

Notes:

    - when pip installing something, make sure it gets added to the document requirements.txt
        you can do this by typing, after the pip install:
            pip freeze > requirements.txt 
            (note: you should still be in the venv)


=========

Tutorials:

    To make a mono-repo with React/Django:
    https://awstip.com/harnessing-the-synergy-of-django-and-react-in-monorepo-projects-f40701ce86ce

=========

How to make a new page: (for example '/checkout'):

1. in src/views/ 
    - make a new folder, give it the title of whatever view you are making. ie. Checkout 
    - make a new file in that folder, give it the same title. ie. Checkout.jsx 
2. inside the file you just made (<WhateverViewYouWantToCreate>.jsx):
    - type "rfc" and then click the autocompletion. this will fill the document with a couple of things:
        import React from 'react'

        export default function Checkout() {
        // here is where our JavaScript code will go, with variables and such.
        return (
            /* the return statement is where all of our HTML-like code will go */
            <div>
                // everything on the page needs to be put within this div.
                Checkout
            </div>
        )

        }
    - right now this is making a View which just states in plain text what the view is.

3. Go to src/App.jsx 
    - inside <Routes> create a new Route:
        <Route path="/checkout" element={<Checkout />} />
                     ^ the path             ^ the new component in Views
    - make sure you import the Checkout element at the top of the page
        import Checkout from './views/Checkout/Checkout';

Now when you navigate to localhost:3000/checkout, it will show you the title "Checkout"