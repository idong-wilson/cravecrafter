{
  "openapi": "3.0.0",
  "info": {
    "title": "CraveCrafter API",
    "description": "The API for the GrubHub part of the CraveCrafter API.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://virtserver.swaggerhub.com/simonpcdutton/CraveCrafter/1.0.0",
      "description": "SwaggerHub API Auto Mocking"
    }
  ],
  "paths": {
    "/oauth2/direct/auth": {
      "post": {
        "tags": [
          "OAuth"
        ],
        "description": "Generates an access token. This endpoint can either take an OAuth2 authorization code or an OpenID token and convert it into a Grubhub access token that authorizes requests to the ordering API. This endpoint is OAuth2-like, as it does not use a redirect so that it can be called via AJAX or by another server. Depending on whether you pass a code or an OpenID token, you may have to call the endpoint via proxy or implement a receiving endpoint on your servers.The access token and openid connect token in the response complies with the Openid Connect Token Response specification., which extends the OAuth2 Token Response specification.",
        "operationId": "getAccessToken",
        "parameters": [
          {
            "name": "grant_type",
            "in": "query",
            "description": "The type of access grant being requested. This value must be \"authorization_code\" or \"token\".",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "description": "The authorization code generated by your servers, which will be used to verify the user's connection. Either this or the token field must be included in the request.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "xxx"
            }
          },
          {
            "name": "token",
            "in": "query",
            "description": "The OpenID token that identifies your current user. Either this or the code field must be included in the request.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "The client ID that we have issued to you.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The scope to grant to your user. This value must be \"openid diner\" if you want to link the diner to an order history. Use \"anonymous\" to authorize the user solely on your client ID. In this case, `code` will be ignored.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenidTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/oauth2/token": {
      "post": {
        "tags": [
          "OAuth"
        ],
        "description": "Endpoint on your servers to authenticate diners. In some authorization flows, Grubhub calls this endpoint on your servers in order to generate an access code that authenticates your server and an Openid token that identifies your user. Both of these pieces of information are used to create the Grubhub API session, which then sends the Openid token and a Grubhub access token to the client. You can can also use this endpoint on the Grubhub server to refresh an existing token. This section should be taken as a specification for the endpoint that Grubhub expects to call. It should be able to accept the query parameters and return the payload specified.",
        "operationId": "authenticateDiner",
        "parameters": [
          {
            "name": "grant_type",
            "in": "query",
            "description": "The type of authorization to grant. This value must be \"authorization_code\" or \"refresh_token\".",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "description": "The authorization code initially generated by your servers, which is verified as valid in this step.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "The client ID that Grubhub has issued to you so you can access our API.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "The URI to redirect to after authorization. If you are implementing the simple direct flow, this should be an empty string.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenidTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/oauth2/authorize": {
      "get": {
        "tags": [
          "OAuth"
        ],
        "description": "Standard OAuth2 authorization endpoint. This is a standard OAuth2 authoriation endpoint, fully compliant with the OAuth2 framework. We include documentation of it here for completeness sake. Depending on which authorization method you use, you may have to call and/or implement this endpoint.",
        "operationId": "getOAuth2",
        "parameters": [
          {
            "name": "response_type",
            "in": "query",
            "description": "The response that you expect, either \"code\" if you expect and authorization code or \"token\" for a implicitly granted authorization token.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "The client ID that Grubhub provided (or you provided to Grubhub) that grants access to our API resources.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "The absolute URI to redirect the client user after the authorization completes.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The server-defined scope for this authorization request. For Grubhub authorization requests, the scope should always be \"Openid diner\".",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "An indicator - often randomly generated - passed between the server and client to verify that the response received came from the requested server. This prevents cross-site forgery attacks.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenidTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Possible invalid redirect URI."
          }
        }
      }
    },
    "/session": {
      "get": {
        "tags": [
          "OAuth"
        ],
        "description": "Return session info. Returns information about the current session, including diner information, access token, and expiration information.",
        "operationId": "getSession",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/diners/{diner_id}/orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "description": "Returns an array of previous orders.",
        "operationId": "getPreviousOrders",
        "parameters": [
          {
            "name": "diner_id",
            "in": "path",
            "description": "the ID (UUID) of the diner whose orders you want to receive",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderHistoryResponse"
                }
              }
            }
          }
        },
        "x-swagger-router-controller": "Orders"
      }
    },
    "/diners/{diner_id}/orders/{order_id}/order-status": {
      "get": {
        "tags": [
          "Orders"
        ],
        "description": "Returns information about current fulfillment estimates as well as the current status of the order.",
        "operationId": "getOrderStatus",
        "parameters": [
          {
            "name": "diner_id",
            "in": "path",
            "description": "The ID of the diner whose order you want to track.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "order_id",
            "in": "path",
            "description": "The ID of the order you want to track.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderEventList"
                }
              }
            }
          }
        },
        "x-swagger-router-controller": "Orders"
      }
    },
    "/diners/{diner_id}/favorites/restaurants": {
      "get": {
        "tags": [
          "Diners"
        ],
        "description": "Returns a list of restaurants that the currently logged in diner has favorited.",
        "operationId": "getFavoriteRestaurants",
        "parameters": [
          {
            "name": "diner_id",
            "in": "path",
            "description": "The ID of the diner whose favorites you want to retrieve.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFavoriteRestaurantResponse"
                }
              }
            }
          }
        },
        "x-swagger-router-controller": "Diners"
      }
    },
    "/diners/{diner_id}/favorites/restaurants/{restaurant_id}": {
      "get": {
        "tags": [
          "Diners"
        ],
        "description": "Returns the information for a single restaurant in a diner's favorites.",
        "operationId": "getFavoriteRestaurant",
        "parameters": [
          {
            "name": "diner_id",
            "in": "path",
            "description": "The ID of the diner whose favorite you want to retrieve.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "The ID of the restaurant you want from the favorites.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FavoriteRestaurant"
                }
              }
            }
          }
        },
        "x-swagger-router-controller": "Diners"
      },
      "post": {
        "tags": [
          "Diners"
        ],
        "description": "Adds a restaurant to the current diner's favorites.",
        "operationId": "addFavoriteRestaurant",
        "parameters": [
          {
            "name": "diner_id",
            "in": "path",
            "description": "The ID of the diner whose favorites you want to retrieve.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "The ID of the restaurant you want to add to the user's favorites.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFavoriteRestaurantResponse"
                }
              }
            }
          }
        },
        "x-swagger-router-controller": "Diners"
      },
      "delete": {
        "tags": [
          "Diners"
        ],
        "description": "Removes the specified restaurant from this diner's list of favorites.",
        "operationId": "removeFavoriteRestaurant",
        "parameters": [
          {
            "name": "diner_id",
            "in": "path",
            "description": "The ID of the diner whose favorite you want to remove.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "The ID of the restaurant you want to remove from the favorites.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFavoriteRestaurantResponse"
                }
              }
            }
          }
        },
        "x-swagger-router-controller": "Diners"
      }
    },
    "/restaurants/v{version}/{restaurant_id}": {
      "get": {
        "tags": [
          "Restaurants"
        ],
        "description": "Returns information about a specified restaurant, including delivery information, current availability, and, optionally, menu items. This is the primary method you should use to get restaurant information. You must already have the desired restaurant's {restaurant_id} to call this method. Your system should already have data that through bulk information feeds that we have provided. To minimize the size of the returned JSON array, append hideMenuItems=true to your parameters. This will return the restaurant information without the list of menu items. If you still want menu items returned, you can use the hideChoiceCategories to filter out the individual menu item choices (i.e. toppings or size for a pizza). As this is a GET call, all parameters must be passed within the URI used to call this API method.",
        "operationId": "getRestaurantInfo",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "The unique identifier of the restaurant for which you want to view information.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The version of the restaurant data that you want to return, either 1 or 3. Version 3 data includes several advanced modifier options for menu items. It is currently only used on a small subset of chain restaurants, but it will eventually be rolled out to all Grubhub restaurants.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "hideChoiceCategories",
            "in": "query",
            "description": "Set this to 'true' to filter out the menu item choices (i.e. pizza toppings, included appetizers, etc.) from the return value.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "hideMenuItems",
            "in": "query",
            "description": "Set this to 'true' to filter out menu items (including menu item choices) from the return value.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "hideUnavailableMenuItems",
            "in": "query",
            "description": "Set this to 'true' to filter out menu items that cannot currently be ordered.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "The delivery location of the diner requesting this restaurant information. This will impact the value of the `delivery_offered_to_diner_location` field. This field uses WKT format, so pass this information in the format \"Point({longitude}, {latitude})\".",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "wkt"
            }
          },
          {
            "name": "showHoursInRestaurantLocalTime",
            "in": "query",
            "description": "Set to 'true' to display the restaurant availability hours in its local time zone, instead of the diner's time zone.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "zipCode",
            "in": "query",
            "description": "The ZIP Code or Postcode of the diner requesting the restaurant information.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "zipcode"
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "The time for which to consider availability, measure in Unix epoch time, which is the number of milliseconds from 00:00:00 UTC on Thursday, 1 January 1970, minus leap seconds. If this parameter is omitted, then the current time will be used.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "time"
            }
          },
          {
            "name": "isFutureOrder",
            "in": "query",
            "description": "Whether the diner is intending to place an order for future pickup or delivery. This causes the `future_order_info` object to be returned within the `restaurant_availability` part of the payload.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestaurantData"
                }
              }
            }
          },
          "404": {
            "description": "Not found - This could indicated that the restaurant ID is invalid."
          },
          "424": {
            "description": "Unprocessable entity - This could indicate that the coordinates provided are invalid."
          }
        },
        "x-swagger-router-controller": "Restaurants"
      }
    },
    "/restaurants/{restaurant_id}/menu_items/{menu_item_id}": {
      "get": {
        "tags": [
          "Restaurants"
        ],
        "description": "Returns the specified menu item from the specified restaurant. The data returned includes any choices the menu item requires, availability information, and pricing.",
        "operationId": "getMenuItemInfo",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "The unique identifier of the restaurant that has the menu item for which you want to view information.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "menu_item_id",
            "in": "path",
            "description": "The ID of the menu item for which you want to view information.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "The time for which to consider availability, measure in Unix epoch time, which is the number of milliseconds from 00:00:00 UTC on Thursday, 1 January 1970, minus leap seconds. If this parameter is omitted, then the current time will be used.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "timestamp"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItem"
                }
              }
            }
          }
        },
        "x-swagger-router-controller": "Restaurants"
      }
    },
    "/restaurants/availability_summaries": {
      "get": {
        "tags": [
          "Restaurants"
        ],
        "description": "Returns information on whether the specified restaurants accept orders for pickup and delivery currently. You can provide up to 30 restaurant IDs as parameters within the API call URI. You must already have the desired restaurants' {restaurant_id} to call this method. Your system should already have data that through bulk information feeds that we have provided.",
        "operationId": "getAvailableRestaurants",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "The restaurant IDs for which you want to return restaurant availability information. You can include this parameter up to 30 times, and therefore check the availability of 30 restaurants at a time.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "The location of the diner for whom to check availability. This field uses WKT format, so pass this information in the format \"Point({longitude}, {latitude})\". This location will affect `delivery_offered_to_diner_location` and `delivery_estimate` return values.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "wkt"
            }
          },
          {
            "name": "includeImages",
            "in": "query",
            "description": "Set this to true to include media and image information in the response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "The time for which to consider availability, measure in Unix epoch time, which is the number of milliseconds from 00:00:00 UTC on Thursday, 1 January 1970, minus leap seconds. If this parameter is omitted, then the current time will be used.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "time"
            }
          },
          {
            "name": "isFutureOrder",
            "in": "query",
            "description": "Whether you want to check availability for a future pickup or delivery. This causes the `future_order_info` object to be returned within the payload.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestaurantAvailabilitySummary"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity - This could indicate that one of the restaurant IDs provided are invalid."
          }
        },
        "x-swagger-router-controller": "Restaurants"
      }
    },
    "/deliveries/{delivery_id}": {
      "get": {
        "tags": [
          "Deliveries"
        ],
        "description": "Retrieve a delivery. Will include current status, driver assignment and location (if driver has been assigned).",
        "operationId": "getDeliveryByID",
        "parameters": [
          {
            "name": "delivery_id",
            "in": "path",
            "description": "The ID of the delivery to retrieve.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Delivery"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. May indicate the delivery estimate has expired or the ID is incorrect."
          }
        },
        "x-swagger-router-controller": "Deliveries"
      }
    },
    "/carts": {
      "get": {
        "tags": [
          "Carts"
        ],
        "description": "Returns the contents of all currently scheduled carts for this diner.",
        "operationId": "getCartsForDiner",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartsByDinerIdResponse"
                }
              }
            }
          }
        },
        "x-swagger-router-controller": "Carts"
      },
      "post": {
        "tags": [
          "Carts"
        ],
        "description": "Creates a new cart.",
        "operationId": "createCart",
        "parameters": [
          {
            "name": "affiliate",
            "in": "query",
            "description": "The affiliate program to which this cart affects. You'll need to include you information here for tracking purposes.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/Affiliate"
            }
          },
          {
            "name": "when_for",
            "in": "query",
            "description": "If your implementation has access to future ordering functionality, use this to specify when the diner wants the order fulfilled. This time must be within the operating hours of the restaurant, accounting for the time it takes to prepare and fulfill the order. The time must follow this format - \"{YYYY}-{MM}-{DD}T{HH}:{MM}:{SS}.000Z\".",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceCreateResponse"
                }
              }
            }
          }
        },
        "x-swagger-router-controller": "Carts"
      }
    },
    "/carts/{cart_id}": {
      "get": {
        "tags": [
          "Carts"
        ],
        "description": "Returns the full details about a single cart.",
        "operationId": "getCartInfo",
        "parameters": [
          {
            "name": "cart_id",
            "in": "path",
            "description": "The ID of the cart to retrieve.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        },
        "x-swagger-router-controller": "Carts"
      },
      "post": {
        "tags": [
          "Carts"
        ],
        "description": "Updates a cart with a new fulfillment time, marking it either as a future order or ASAP.",
        "operationId": "updateCartFulfillmentTime",
        "parameters": [
          {
            "name": "cart_id",
            "in": "path",
            "description": "The ID of the cart to retrieve.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "when_for",
            "in": "header",
            "description": "If your implementation has access to future ordering functionality, use this to specify when the diner wants the order fulfilled. This time must be within the operating hours of the restaurant, accounting for the time it takes to prepare and fulfill the order.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "x-swagger-router-controller": "Carts"
      },
      "delete": {
        "tags": [
          "Carts"
        ],
        "description": "Removes an in-progress cart or cancels a scheduled order as well as all related ordering information from the system. This endpoint has a longer timeout than most endpoints= 1500 ms.",
        "operationId": "deleteCart",
        "parameters": [
          {
            "name": "cart_id",
            "in": "path",
            "description": "The ID of the cart to delete.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          }
        },
        "x-swagger-router-controller": "Carts"
      }
    },
    "/carts/{cart_id}/lines": {
      "post": {
        "tags": [
          "Carts"
        ],
        "description": "Adds a menu item to a cart as a new line, complete with all the necessary choices.",
        "operationId": "addLineToCart",
        "parameters": [
          {
            "name": "cart_id",
            "in": "path",
            "description": "The ID of the cart to add a menu item to.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "restaurant_id",
            "in": "header",
            "description": "The ID of the restaurant who offers the menu item that this diner wants to add to the cart.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "menu_item_id",
            "in": "header",
            "description": "The ID of the menu item to add to the cart.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "options",
            "in": "header",
            "description": "Selections for the options associated with this menu item.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CartLineOptionData"
              }
            }
          },
          {
            "name": "quantity",
            "in": "header",
            "description": "The number of menu items with these choices to add to the cart.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "special_instructions",
            "in": "header",
            "description": "Diner-provided instructions on how to prepare this menu item.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceCreateResponse"
                }
              }
            }
          }
        },
        "x-swagger-router-controller": "Carts"
      }
    },
    "/carts/{cart_id}/lines/{id}": {
      "get": {
        "tags": [
          "Carts"
        ],
        "description": "Returns the full details about a the menu item added as the specified line within the specified cart.",
        "operationId": "getLineFromCart",
        "parameters": [
          {
            "name": "cart_id",
            "in": "path",
            "description": "The ID of the cart to return the line information for.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the line item for which to return information.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartLine"
                }
              }
            }
          }
        },
        "x-swagger-router-controller": "Carts"
      },
      "put": {
        "tags": [
          "Carts"
        ],
        "description": "Updates a line in a cart using the same parameters as in creating the line.",
        "operationId": "updateLineInCart",
        "parameters": [
          {
            "name": "cart_id",
            "in": "path",
            "description": "The ID of the cart to update a menu item.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the line item to update.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "restaurant_id",
            "in": "header",
            "description": "The ID of the restaurant who offers the updated menu item.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "menu_item_id",
            "in": "header",
            "description": "The ID of the menu item to update in the cart.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "options",
            "in": "header",
            "description": "Selections for the options associated with this menu item.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CartLineOptionData"
              }
            }
          },
          {
            "name": "quantity",
            "in": "header",
            "description": "The updated number of menu items for this line.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "special_instructions",
            "in": "header",
            "description": "Updated diner-provided instructions on how to prepare this menu item.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-swagger-router-controller": "Carts"
      },
      "delete": {
        "tags": [
          "Carts"
        ],
        "description": "Removes all of a single menu item from a cart, including the choices made.",
        "operationId": "deleteLineFromCart",
        "parameters": [
          {
            "name": "cart_id",
            "in": "path",
            "description": "The ID of the cart from which to delete the line.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the line item to delete.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-swagger-router-controller": "Carts"
      }
    },
    "/carts/{cart_id}/tip": {
      "post": {
        "tags": [
          "Carts"
        ],
        "description": "Add information about the tip amount and type to the cart.",
        "operationId": "addTipInfoToCart",
        "parameters": [
          {
            "name": "cart_id",
            "in": "path",
            "description": "The ID of the cart to add tip information to.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "amount",
            "in": "header",
            "description": "The amount (in cents) of tip to add to the order.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "type",
            "in": "header",
            "description": "How the tip amount will be collected. Must be either \"INCLUDE_IN_BILL\" or \"CASH\".",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-swagger-router-controller": "Carts"
      }
    },
    "/carts/{cart_id}/incomplete_pickup": {
      "put": {
        "tags": [
          "Carts"
        ],
        "description": "Allows workflows that may not have all the pickup info to mark a cart for pickup.",
        "operationId": "addIncompletePickupInfo",
        "parameters": [
          {
            "name": "cart_id",
            "in": "path",
            "description": "The ID of the cart to mark as a pickup order.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-swagger-router-controller": "Carts"
      }
    },
    "/carts/{cart_id}/incomplete_delivery": {
      "put": {
        "tags": [
          "Carts"
        ],
        "description": "Allows workflows that may not have all the pickup info to mark a cart for delivery.",
        "operationId": "addIncompleteDeliveryInfo",
        "parameters": [
          {
            "name": "cart_id",
            "in": "path",
            "description": "The ID of the cart to mark as a delivery order.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "latitude",
            "in": "header",
            "description": "The latitude coordinate of the delivery address.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "longitude",
            "in": "header",
            "description": "The longitude coordinate of the delivery address.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-swagger-router-controller": "Carts"
      }
    },
    "/carts/{cart_id}/delivery_info": {
      "put": {
        "tags": [
          "Carts"
        ],
        "description": "Mark a cart for delivery and provide information on the delivery location and recipient. You will need to geocode the address to get the precise latitude and longitude information. The address that you pass here is for the driver only; we do not validate that it matches the coordinates given.",
        "operationId": "addDeliveryInfoToCart",
        "parameters": [
          {
            "name": "cart_id",
            "in": "path",
            "description": "The ID of the cart to mark as a delivery order.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "street_address1",
            "in": "header",
            "description": "The street address and number of the delivery address.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cross_streets",
            "in": "header",
            "description": "The nearest cross street or streets to the street address.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "street_address2",
            "in": "header",
            "description": "The unit or apartment information associated with the delivery address.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address_locality",
            "in": "header",
            "description": "The city, town, or other locality in which the delivery address is located.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address_region",
            "in": "header",
            "description": "The state, territory, or other region in which the delivery address is located.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postal_code",
            "in": "header",
            "description": "The ZIP Code or Postcode of the delivery address.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delivery_instructions",
            "in": "header",
            "description": "Diner-provided delivery instructions.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "header",
            "description": "The name of the diner receiving the delivery.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "in": "header",
            "description": "The phone number of the diner receiving the delivery.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "phone"
            }
          },
          {
            "name": "email",
            "in": "header",
            "description": "The email address of the diner who ordered delivery.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "email"
            }
          },
          {
            "name": "address_country",
            "in": "header",
            "description": "The country in which the delivery address is located.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "green_indicated",
            "in": "header",
            "description": "Whether the diner has indicated that they want to forgo plastic utensils.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "latitude",
            "in": "header",
            "description": "The latitude coordinate of the delivery address.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "longitude",
            "in": "header",
            "description": "The longitude coordinate of the delivery address.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-swagger-router-controller": "Carts"
      }
    },
    "/carts/{cart_id}/pickup_info": {
      "put": {
        "tags": [
          "Carts"
        ],
        "description": "Mark a cart for pickup and provide information about the delivery recipient.",
        "operationId": "addPickupInfoToCart",
        "parameters": [
          {
            "name": "cart_id",
            "in": "path",
            "description": "The ID of the cart to mark as a pickup order.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "pickup_instructions",
            "in": "header",
            "description": "Diner-provided pickup instructions.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "header",
            "description": "The name of the diner picking up the order.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "in": "header",
            "description": "The phone number of the diner picking up the order.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "phone"
            }
          },
          {
            "name": "email",
            "in": "header",
            "description": "The email address of the diner who ordered pickup.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "email"
            }
          },
          {
            "name": "green_indicated",
            "in": "header",
            "description": "Whether the diner has indicated that they want to forgo plastic utensils.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-swagger-router-controller": "Carts"
      }
    },
    "/carts/{id}/notification_preferences": {
      "post": {
        "tags": [
          "Carts"
        ],
        "description": "Set the notification channels by which the diner will be informed of the status of their order. If you want to set up custom notifications, set the channels.WEBHOOK.destinations value in the body to the webhook URI that will process the notification payload.",
        "operationId": "configureNotifications",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The cart to which to assign notification preferences. This will override the diner's existing preferences. If you specify the `WEBHOOK` channel, then this request will POST a [WebhookPayload](https://grubhub-developers.zendesk.com/hc/en-us/articles/115004586823-Carts#_definitions_WebhookPayload) to the URI specified as the destination. See [Using Webhook Notifications](https://grubhub-developers.zendesk.com/hc/en-us/articles/115004972463-Setting-Custom-Notifications) for more information. You can disable all notifications by specifying `\"DISABLED= []`; that is, a DISABLED channel with an empty array. Use a colon instead of an = with DISABLED=[].",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "channels",
            "in": "header",
            "description": "The channel(s) by which the diner will notified of their order status.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/NotificationPreferences"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationPreferences"
                }
              }
            }
          }
        },
        "x-swagger-router-controller": "Carts"
      }
    },
    "/carts/{cart_id}/payments": {
      "post": {
        "tags": [
          "Carts"
        ],
        "description": "Adds a previously vaulted or granted payment method to the specified cart.",
        "operationId": "addCartPayment",
        "parameters": [
          {
            "name": "cart_id",
            "in": "path",
            "description": "The cart to which to attach a payment method. A single cart can have multiple payment methods.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payment_id",
            "in": "header",
            "description": "The ID associated with the payment, returned from `/payments/partner_payment`.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "header",
            "description": "The type of payment being added to the cart. Currently, we accept \"CREDIT_CARD\", \"PAYPAL_EXPRESS\", \"AMEX_EXPRESS\", \"CASH\", and \"PROMO_CODE\".",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "amount",
            "in": "header",
            "description": "The amount of the bill that this payment method should cover. If not included in the request, then the given payment will cover the remainder of the cart bill or, in the case of a promo code, the remainder of the code amount.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceCreateResponse"
                }
              }
            }
          }
        },
        "x-swagger-router-controller": "Carts"
      }
    },
    "/carts/{cart_id}/payments/{id}": {
      "get": {
        "tags": [
          "Carts"
        ],
        "description": "Returns information about the specified payment attached to this cart.",
        "operationId": "getCartPayment",
        "parameters": [
          {
            "name": "cart_id",
            "in": "path",
            "description": "The cart to which to return information on a payment.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The payment ID to return information on.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          }
        },
        "x-swagger-router-controller": "Carts"
      },
      "put": {
        "tags": [
          "Carts"
        ],
        "description": "Updates the amount covered by the specified payment attached to this cart.",
        "operationId": "updateCartPayment",
        "parameters": [
          {
            "name": "cart_id",
            "in": "path",
            "description": "The cart in which to update the payment amount.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the payment to update.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "amount",
            "in": "header",
            "description": "The amount of the bill to cover with this payment. Leave this field out of the request to have the payment cover the remainder of the bill.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-swagger-router-controller": "Carts"
      },
      "delete": {
        "tags": [
          "Carts"
        ],
        "description": "Removes a payment method from a cart.",
        "operationId": "deleteCartPayment",
        "parameters": [
          {
            "name": "cart_id",
            "in": "path",
            "description": "The cart from which to delete a payment method.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the payment to remove.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-swagger-router-controller": "Carts"
      }
    },
    "/carts/{cart_id}/bill": {
      "get": {
        "tags": [
          "Carts"
        ],
        "description": "Checks if the cart is ready for checkout; if so, it returns the cart bill and a checkout token.",
        "operationId": "getBillForCart",
        "parameters": [
          {
            "name": "cart_id",
            "in": "path",
            "description": "The ID of the cart for which to retrieve the bill",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bill"
                }
              }
            }
          }
        },
        "x-swagger-router-controller": "Carts"
      }
    },
    "/carts/{cart_id}/checkout": {
      "get": {
        "tags": [
          "Carts"
        ],
        "description": "Returns cart information after it has been sent to checkout.",
        "operationId": "getCartAfterCheckout",
        "parameters": [
          {
            "name": "cart_id",
            "in": "path",
            "description": "The ID of the cart to view.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutResponse"
                }
              }
            }
          }
        },
        "x-swagger-router-controller": "Carts"
      },
      "post": {
        "tags": [
          "Carts"
        ],
        "description": "Check out a cart using the checkout_token produced by the /carts/{cart_id}/bill endpoint. This endpoint has a longer timeout than most endpoints= 12000 ms. NOTE - The order will not be sent to the restaurant until this endpoint completes successfully. Do not display confirmation messages to diners until you get a 200 success response. Otherwise, you could introduce perceived delays to the diner, potentially triggering interactions with customer care.",
        "operationId": "checkoutCart",
        "parameters": [
          {
            "name": "cart_id",
            "in": "path",
            "description": "The ID of the cart to checkout.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "checkout_token",
            "in": "header",
            "description": "The checkout_token produced by the /carts/{cart_id}/bill endpoint.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutResponse"
                }
              }
            }
          }
        },
        "x-swagger-router-controller": "Carts"
      }
    },
    "/carts/{order_id}/recart": {
      "post": {
        "tags": [
          "Cart"
        ],
        "description": "Create a new cart order out of a previously placed order.",
        "operationId": "recreatePrevOrderInCart",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "description": "The ID of the cart to place the contents of the old order.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "brand",
            "in": "header",
            "description": "The brand under which this order should be processed.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "affiliate",
            "in": "header",
            "description": "The affiliate program associated with this order.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/Affiliate"
            }
          },
          {
            "name": "fail_out_on_validation_error",
            "in": "header",
            "description": "Whether this request should fail to create the new cart if it fails to validate.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "recart_flags",
            "in": "header",
            "description": "Any flags to modify the new order.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartWithValidationErrors"
                }
              }
            }
          }
        },
        "x-swagger-router-controller": "Carts"
      }
    },
    "/carts/{cart_id}/edit": {
      "post": {
        "tags": [
          "Carts"
        ],
        "description": "Edits a cart that has been scheduled as a future order. Does not work for ASAP orders.",
        "operationId": "editCheckedOutCart",
        "parameters": [
          {
            "name": "cart_id",
            "in": "path",
            "description": "The ID of the cart to re-open for editing",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-swagger-router-controller": "Carts"
      }
    },
    "/carts/{cart_id}/revert": {
      "post": {
        "tags": [
          "Carts"
        ],
        "description": "Closes an editable cart and returns it to its checked out state.",
        "operationId": "closeEditableCart",
        "parameters": [
          {
            "name": "cart_id",
            "in": "path",
            "description": "The ID of the cart to revert.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-swagger-router-controller": "Carts"
      }
    },
    "/payments/partner_payment": {
      "post": {
        "tags": [
          "Payments"
        ],
        "description": "This endpoint attaches a credit card or paypal express account - via a Braintree nonce - to the currently active cart.",
        "operationId": "attachPaymentToCart",
        "parameters": [
          {
            "name": "payment_nonce",
            "in": "header",
            "description": "A nonce created using the Braintree Grant API that links to the credit card to use.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "header",
            "description": "The type of payment to add. This should be \"CREDIT_CARD\", \"PAYPAL_EXPRESS\", or \"APPLE_PAY\". Note that you'll need to register your Braintree merchant account with us as described at https://developer.paypal.com/braintree/docs/guides/apple-pay/configuration/ios/v4 and then contact us to activate it.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payment_name",
            "in": "header",
            "description": "A descriptive name to give this payment as to help the diner remember it. Usually, this information comes from diner input.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vaulted",
            "in": "header",
            "description": "Whether this payment should be stored for future use in Grubhub orders. Currently, this should always be set to `false`.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is_default",
            "in": "header",
            "description": "Whether this payment method should be used as the default method in future orders.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceCreateResponse"
                }
              }
            }
          }
        },
        "x-swagger-router-controller": "Payments"
      }
    },
    "/payments/apple_pay": {
      "post": {
        "tags": [
          "Payments"
        ],
        "description": "Adds an Apple Pay account to the available payment methods for this user.",
        "operationId": "addApplePayAccount",
        "parameters": [
          {
            "name": "payment_nonce",
            "in": "header",
            "description": "The Braintree nonce associated with the Apple Pay account to add.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "header",
            "description": "The type of payment. For this endpoint, this field should be \"APPLE PAY\".",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payment_name",
            "in": "header",
            "description": "The name under which to store this payment on the diner's account, e.g. \"Personal Account\".",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vaulted",
            "in": "header",
            "description": "Whether to store the payment method details with the diner's account. By default, this is false.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is_default",
            "in": "header",
            "description": "Whether this payment method is automatically selected by default when the diner proceeds to check out a cart.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceCreateResponse"
                }
              }
            }
          }
        },
        "x-swagger-router-controller": "Payments"
      }
    },
    "/kendo/get-available-entitlement-types": {
      "post": {
        "tags": [
          "Payments"
        ],
        "description": "This service returns the payment methods attached available to your integration currently. If a method is temporarily unavailable or if new methods become available, this list will change.",
        "operationId": "getAvailablePaymentMethods",
        "parameters": [
          {
            "name": "cart",
            "in": "header",
            "description": "The cart to check. If this is not included, the request will return information for the current cart associated with the currently authorized diner.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/Cart"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableEntitlementTypesResponse"
                }
              }
            }
          }
        },
        "x-swagger-router-controller": "Payments"
      }
    }
  },
  "components": {
    "schemas": {
      "ActionMessagesMetadata": {
        "type": "object",
        "properties": {
          "chain_small_order_fee": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChainSmallOrderFeeActionMessageParts"
              },
              {
                "description": "Information related to an additional fee charged because an order is below a certain threshold. This will be null if this restaurant does not charge a small order fee."
              }
            ]
          },
          "free_menu_item": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FreeMenuItemParts"
              },
              {
                "description": "Information about a menu item that the diner could add to their cart for free."
              }
            ]
          }
        },
        "description": "Information that can be included in messages to diners, which indicate actions that they can take."
      },
      "AddOn": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A universally unique identifier for this particular add on in this cart.",
            "format": "uuid"
          },
          "restaurant_id": {
            "type": "string",
            "description": "The restaurant adding this to the cart. Not used for DONATE_THE_CHANGE."
          },
          "type": {
            "type": "string",
            "description": "The type on of add-on that this object represents. Currently, the only possible value for this is \"DONATE_THE_CHANGE\", which indicates that the diner rounded their cost up to the nearest dollar as a donation."
          }
        },
        "description": "Any additional add-on charges not covered by other charge fields. Currently, this only stores information about diner-initiated top-up payments, where the diner adds an amount to the cart in order to meet a restaurant minimum."
      },
      "Address": {
        "type": "object",
        "properties": {
          "locality": {
            "type": "string",
            "description": "The city, town, or other locality in which this address is located."
          },
          "region": {
            "type": "string",
            "description": "The state, county, or other larger region in which this address is located."
          },
          "postal_code": {
            "type": "string",
            "description": "The ZIP Code or Postcode of the address."
          },
          "street_address": {
            "type": "string",
            "description": "The house number and street name portion of the address."
          },
          "country": {
            "type": "string",
            "description": "The country in which this address is located."
          }
        },
        "description": "A full street address broken into its constituent parts."
      },
      "Adjustment": {
        "type": "object",
        "properties": {
          "update_id": {
            "type": "string",
            "description": "A unique identifier for the care update record where this adjustment was applied."
          },
          "adjustment_id": {
            "type": "string",
            "description": "A unique identifier for this adjustment."
          },
          "association_id": {
            "type": "string",
            "description": "If the adjustment changes a single line in the order, then this will be the line identifier. If it adjusts the order, then this will be NULL."
          },
          "association_type": {
            "description": "The type of adjustment, either \"ORDER\" or \"LINE\"."
          },
          "adjustment_amount": {
            "type": "integer",
            "description": "The value of the adjustment in cents."
          },
          "adjustment_type": {
            "type": "string",
            "description": "The method by which the adjustment amount should be applied to the value of the cart. Values can be=> - PERCENT - The amount is a percentage that applies to the entire care value. - FIXED - The amount listed should be subtracted from the cart total. - ABSOLUTE - The listed amount should replace the previous cart total."
          },
          "adjustment_note": {
            "type": "string",
            "description": "Information about why this order was adjusted, added by the Grubhub care team that made the adjustment."
          }
        },
        "description": "Information about how and why an order has been adjusted."
      },
      "Affiliate": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID value of the affiliate program."
          },
          "type": {
            "type": "string",
            "description": "The type of affiliate program."
          }
        },
        "description": "An affiliate program descriptor."
      },
      "AvailableEntitlementType": {
        "type": "object",
        "properties": {
          "entitlement_type": {
            "type": "string",
            "description": "The type of payment method."
          },
          "detail_url": {
            "type": "string",
            "description": "The URI of the endpoint against which you can make calls to view, change, or delete this payment method. Because we do not currently support shared vaulting, these URIs will not hold any payment information.",
            "format": "uri"
          }
        },
        "description": "A payment type that could be attached to a cart. If it is available, then the URI can be used to request information about it."
      },
      "AvailableEntitlementTypesResponse": {
        "type": "object",
        "properties": {
          "available_entitlement_types": {
            "type": "array",
            "description": "An array of the payment types",
            "items": {
              "$ref": "#/components/schemas/AvailableEntitlementType"
            }
          }
        },
        "description": "An array of the entitlement types. If a given entitlement is available as a payment method, then the URI field can be used to request information about it. Because we do not currently support shared vaulting, these URIs will not hold any payment information."
      },
      "AvailableHours": {
        "type": "object",
        "properties": {
          "day_of_week": {
            "type": "integer",
            "description": "The day of the week expressed as an integer, where 1 is Monday."
          },
          "time_ranges": {
            "type": "array",
            "description": "The times on which this restaurant is open for a single day.",
            "items": {
              "type": "integer"
            }
          }
        },
        "description": "The day-by-day hours when a restaurant is available to accept orders."
      },
      "AvailablePayment": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of payment."
          },
          "detail_url": {
            "type": "string",
            "description": "The URI that lists the details of this payment method.",
            "format": "uri"
          }
        },
        "description": "The name and descriptor URI of a single payment type."
      },
      "Bill": {
        "type": "object",
        "properties": {
          "allowed_payment_types": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AvailablePayment"
              },
              {
                "description": "An array of payment methods available to check this cart out."
              }
            ]
          },
          "balance": {
            "type": "integer",
            "description": "The total remaining amount to be paid on this cart order."
          },
          "state": {
            "type": "string",
            "description": "A label indicating where in the order process this cart is."
          },
          "checkout_token": {
            "type": "string",
            "description": "If the cart is ready to checkout, you can pass this value in the body of the /carts/{cart_id}/checkout request."
          },
          "validation_errors": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidationError"
              },
              {
                "description": "If the cart is not ready for checkout, this will contain information about why that is."
              }
            ]
          }
        },
        "description": "Information about the bill associated with a cart and, if the cart is ready to checkout, a checkout_token."
      },
      "Cart": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the cart.",
            "format": "uuid"
          },
          "diner_id": {
            "type": "string",
            "description": "The ID of the diner associated with this cart.",
            "format": "uuid"
          },
          "group_id": {
            "type": "string",
            "description": "The ID of the group to which this cart belongs.",
            "format": "uuid"
          },
          "when_for": {
            "type": "string",
            "description": "When this cart is scheduled to be fulfilled.",
            "format": "date-time"
          },
          "is_asap": {
            "type": "boolean",
            "description": "Indicates whether this order is to be completed immediately after checkout."
          },
          "currency": {
            "type": "string",
            "description": "The three-letter code for the type of currency that will be used to pay for this cart."
          },
          "fulfillment_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FulfillmentInfo"
              },
              {
                "description": "Information about how to deliver or arrange pickup for this cart order."
              }
            ]
          },
          "notification_preferences": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NotificationPreferences"
              },
              {
                "description": "The notification preferences that the diner applied to this cart."
              }
            ]
          },
          "charges": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CartCharges"
              },
              {
                "description": "Details about the costs associated with this cart order."
              }
            ]
          },
          "payments": {
            "type": "array",
            "description": "An array of payments applied to this cart.",
            "items": {
              "$ref": "#/components/schemas/Payment"
            }
          },
          "restaurant_ids": {
            "type": "array",
            "description": "The IDs of the restaurants associated with the menu items in this cart.",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "restaurants": {
            "type": "array",
            "description": "An array of the restaurants from which the diner is ordering food.",
            "items": {
              "$ref": "#/components/schemas/Restaurant"
            }
          },
          "affiliate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Affiliate"
              },
              {
                "description": "The affiliate program associated with this order."
              }
            ]
          },
          "time_placed": {
            "type": "string",
            "description": "The date and time on which the diner placed this order.",
            "format": "date-time"
          },
          "recommended_tip_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecommendedTipSettings"
              },
              {
                "description": "The recommended tip to apply as both an amount and a percentage of the total bill."
              }
            ]
          },
          "catering_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CateringInfo"
              },
              {
                "description": "Information as to how this order should be fulfilled if it is a catered event."
              }
            ]
          },
          "adjustments": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CartAdjustments"
              },
              {
                "description": "The adjustments made by the Grubhub Care Team and how they affect individual cart charges and the total cost."
              }
            ]
          },
          "action_messages_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionMessagesMetadata"
              },
              {
                "description": "Information related to messages for the diner that they can take action on."
              }
            ]
          },
          "has_ordering_info_tier": {
            "type": "boolean",
            "description": "Whether or not the value of this cart qualifies it for longer preparation times listed in an ordering tier."
          }
        },
        "description": "Information about a cart."
      },
      "CartAdjustments": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total value of the adjustments in cents."
          },
          "adjustments": {
            "type": "array",
            "description": "Detailed information about each adjustment applied to this charge item or total.",
            "items": {
              "$ref": "#/components/schemas/Adjustment"
            }
          }
        },
        "description": "The adjustments made by the Grubhub Care Team and how they affect individual cart charges and the total cost."
      },
      "CartCharges": {
        "type": "object",
        "properties": {
          "lines": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CartLines"
              },
              {
                "description": "The total amount of the order, as well as a break down of each menu item line."
              }
            ]
          },
          "coupons": {
            "type": "array",
            "description": "A list of the coupons that affect the price of this cart.",
            "items": {
              "$ref": "#/components/schemas/Coupon"
            }
          },
          "diner_subtotal": {
            "type": "integer",
            "description": "The total cost of all the food items in the cart before taxes and fees."
          },
          "fees": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CartFees"
              },
              {
                "description": "Information about the fees applied to this cart."
              }
            ]
          },
          "donations": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CartDonations"
              },
              {
                "description": "Any donations applied to the cart total, such as Donate the Change"
              }
            ]
          },
          "taxes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CartTaxes"
              },
              {
                "description": "Information about the taxes applied to this cart."
              }
            ]
          },
          "tip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Tip"
              },
              {
                "description": "Information about the tip applied to this order."
              }
            ]
          },
          "diner_grand_total": {
            "type": "integer",
            "description": "The total amount of the bill for this order, including menu items, taxes, fees, and tip."
          },
          "adjustments": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CartAdjustments"
              },
              {
                "description": "The adjustments made by the Grubhub Care Team and how they affect individual cart charges and the total cost."
              }
            ]
          },
          "add_ons": {
            "type": "array",
            "description": "N/A",
            "items": {
              "$ref": "#/components/schemas/AddOn"
            }
          }
        },
        "description": "Details about the costs associated with this cart order."
      },
      "CartDonations": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total amount in cents of the donation charged to this cart."
          }
        },
        "description": "Information about charity donations, such as to Donate the Change, attached to this cart."
      },
      "CartFee": {
        "type": "object",
        "properties": {
          "calculated_amount": {
            "type": "integer",
            "description": "The total amount of the fee. If the fee is percentage-based, this will be computed based on the cart subtotal."
          },
          "group": {
            "type": "string",
            "description": "The group identifer for the restaurant whose menu items are in this cart."
          },
          "type": {
            "type": "string",
            "description": "The specific type of fee contained in this object. This will be either 'DELIVERY', 'CHAIN_SERVICE_FEE', 'CHAIN_SMALL_ORDER_FEE', or 'MINIMUM_BASED_DELIVERY'."
          },
          "id": {
            "type": "string",
            "description": "An identifier for this specific fee."
          },
          "name": {
            "type": "string",
            "description": "A human-readable name for this fee."
          },
          "adjustments": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CartAdjustments"
              },
              {
                "description": "If adjustments have been made to the cart, then this object reflects the portion of that adjustment applicable to this fee."
              }
            ]
          }
        },
        "description": "Complete information about a specific fee applied to a cart."
      },
      "CartFees": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total amount of fees to add to a cart, in cents."
          },
          "delivery": {
            "type": "integer",
            "description": "The fee for delivery."
          },
          "service": {
            "type": "integer",
            "description": "The service added in addition to delivery fees."
          },
          "fee_items": {
            "type": "array",
            "description": "Complete information about a specific fee applied to a cart.",
            "items": {
              "$ref": "#/components/schemas/CartFee"
            }
          }
        },
        "description": "Information about the delivery and other fees that apply to an order."
      },
      "CartFeeTax": {
        "type": "object",
        "properties": {
          "calculated_amount": {
            "type": "integer",
            "description": "The amount that this tax on a fee adds to the cart total."
          },
          "fee_type": {
            "type": "string",
            "description": "The specific type of fee that this tax amount is associated with. This will be either 'DELIVERY', 'CHAIN_SERVICE_FEE', or 'CHAIN_SMALL_ORDER_FEE'."
          }
        },
        "description": "Tax costs associated with a specific fee."
      },
      "CartLine": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID for this line within a cart.",
            "format": "uuid"
          },
          "menu_item_id": {
            "type": "string",
            "description": "The ID of the menu item added to this line item."
          },
          "name": {
            "type": "string",
            "description": "The name of the menu item on this line."
          },
          "price": {
            "type": "integer",
            "description": "The price the diner is paying for this menu item in cents."
          },
          "display_price": {
            "type": "integer",
            "description": "The price displayed for this menu item."
          },
          "quantity": {
            "type": "integer",
            "description": "The total number of this menu item included in this cart."
          },
          "diner_total": {
            "type": "integer",
            "description": "The total cost to the diner from this cart line."
          },
          "options": {
            "$ref": "#/components/schemas/CartLineOption"
          }
        },
        "description": "Details about a single menu item line in a cart."
      },
      "CartLineOption": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID associated with this option."
          },
          "name": {
            "type": "string",
            "description": "The display name of the option."
          },
          "price": {
            "type": "integer",
            "description": "The increase in price due to this option, in cents."
          }
        },
        "description": "The options that the diner selected for a menu item."
      },
      "CartLineOptionData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID associated with the option being selected."
          }
        },
        "description": "Selections for the choices associated with a menu item being added to a cart."
      },
      "CartLines": {
        "type": "object",
        "properties": {
          "diner_total": {
            "type": "number",
            "description": "The total charges associated with this cart order."
          },
          "line_items": {
            "type": "array",
            "description": "Information about an individual menu item line within this cart",
            "items": {
              "$ref": "#/components/schemas/CartLine"
            }
          }
        },
        "description": "The total amount of the order, as well as a break down of each menu item line."
      },
      "CartLookup": {
        "type": "object",
        "properties": {
          "cart_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Cart"
              },
              {
                "description": "Information about this cart, including menu items, payment, and fulfillment information."
              }
            ]
          }
        },
        "description": "A mapping of carts by their UUID identifier."
      },
      "CartsByDinerIdResponse": {
        "type": "object",
        "properties": {
          "carts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CartLookup"
              },
              {
                "description": "An array of CartLookup objects indexed by diner ID."
              }
            ]
          }
        },
        "description": "A map of open carts indexed by diner IDs. Returned by GET /paths/carts."
      },
      "CartTaxes": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total taxes applied to a cart in cents."
          },
          "sales": {
            "type": "integer",
            "description": "The amount of sales taxes applied to a cart in cents."
          },
          "delivery": {
            "type": "integer",
            "description": "The taxes related to delivery applied to a cart."
          },
          "service": {
            "type": "integer",
            "description": "The taxes applicable to any service charges on the cart."
          },
          "fee_tax_items": {
            "type": "array",
            "description": "Tax costs associated with a specific fee.",
            "items": {
              "$ref": "#/components/schemas/CartFeeTax"
            }
          }
        },
        "description": "Information about the taxes applied to a cart order."
      },
      "CartWithValidationErrors": {
        "type": "object",
        "properties": {
          "validation_errors": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidationError"
              },
              {
                "description": "Error messages that describe why this cart failed to validate."
              }
            ]
          }
        },
        "description": "A re-carted order with validation errors."
      },
      "CateringInfo": {
        "type": "object",
        "properties": {
          "estimated_attendees": {
            "type": "integer",
            "description": "The number of people that the diner expects to attend the catering event."
          },
          "budget": {
            "type": "integer",
            "description": "The total budget (in cents) allowed for the catered food."
          },
          "alternate_name": {
            "type": "string",
            "description": "An alternate contact name for the order."
          },
          "alternate_phone": {
            "type": "string",
            "description": "The alternate contact's phone number."
          },
          "green_indicated": {
            "type": "boolean",
            "description": "Whether the diner indicated they want to forgo plastic utensils."
          },
          "setup_food": {
            "type": "boolean",
            "description": "Whether the diner indicated that they want to have the food setup for them."
          },
          "setup_instructions": {
            "type": "string",
            "description": "Diner-provided instructions as to how to setup the catered food."
          }
        },
        "description": "Information on how to fulfill an order as a catered meal."
      },
      "ChainSmallOrderFeeActionMessageParts": {
        "type": "object",
        "properties": {
          "fee_amount_cents": {
            "type": "integer",
            "description": "The amount of the small order fee - in cents - currently being applied to the cart."
          },
          "balance_to_waiver_cents": {
            "type": "integer",
            "description": "The additional amount - in cents - that the diner needs to add to their cart in order to avoid the small order fee."
          }
        },
        "description": "Information about the small order fee - the fee amount and additional cart amount needed to avoid the fee."
      },
      "CheckoutResponse": {
        "type": "object",
        "properties": {
          "order_number": {
            "type": "string",
            "description": "The number associated with the order in the Grubhub system."
          },
          "order_tracking": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderTracking"
              },
              {
                "description": "Whether this order can be tracked."
              }
            ]
          }
        },
        "description": "A cart object after being checked out."
      },
      "ChoiceCategory": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "A UUID that uniquely identifies this category within the Grubhub system.",
            "format": "uuid"
          },
          "id": {
            "type": "string",
            "description": "A unique identifier for this choice category."
          },
          "name": {
            "type": "string",
            "description": "The display name for this category."
          },
          "min_choice_options": {
            "type": "integer",
            "description": "The minimum number of choices that a diner must make in order to add the menu item to their cart."
          },
          "included_choice_options": {
            "type": "integer",
            "description": "Indicates the number of choices that are included as part of the item price."
          },
          "max_choice_options": {
            "type": "integer",
            "description": "The maximum number of choices that a diner can make when adding this menu item to their cart."
          },
          "choice_option_list": {
            "type": "array",
            "description": "The choices available in this category.",
            "items": {
              "$ref": "#/components/schemas/ChoiceOption"
            }
          },
          "available_hours_list": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AvailableHours"
              },
              {
                "description": "Information about when this category of choices is available to diners"
              }
            ]
          },
          "variation_target": {
            "type": "boolean",
            "description": "Whether this category causes additional price changes for other categories of choices."
          },
          "item_variation_id": {
            "type": "integer",
            "description": "The category ID whose selection will affect the price changes in this category.",
            "format": "int64"
          },
          "get_minimum_choice_price": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Price"
              },
              {
                "description": "The minimum price increase possible from this category."
              }
            ]
          },
          "get_maximum_choice_price": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Price"
              },
              {
                "description": "The maximum price increase possible from this category"
              }
            ]
          },
          "sequence": {
            "type": "integer",
            "description": "The order in which this category displays among the other choice categories."
          }
        },
        "description": "A category of choices for a single menu item."
      },
      "ChoiceOption": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "A UUID that uniquely identifies this choice within the Grubhub system.",
            "format": "uuid"
          },
          "id": {
            "type": "integer",
            "description": "An identifying number for this choice option."
          },
          "description": {
            "type": "string",
            "description": "The displayed description for this option."
          },
          "label": {
            "type": "string",
            "description": "A longer description of the item. This description may or may not be used in your integration."
          },
          "price": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Price"
              },
              {
                "description": "How much this option adds to the price of the menu item."
              }
            ]
          },
          "delivery_price": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Price"
              },
              {
                "description": "How much this option adds to the price of the menu item in delivery orders."
              }
            ]
          },
          "pickup_price": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Price"
              },
              {
                "description": "How much this option adds to the price of the menu item in pickup orders."
              }
            ]
          },
          "choice_category_list": {
            "type": "array",
            "description": "The categories of choices associated with this individual choice option. This lets you offer additional depth to menu item choices. For example, you could offer a choice of additional sides, one of which has a selection of sauces, one of which can be mild, medium, or spicy. Choices can be nested like this down five levels at most.",
            "items": {
              "$ref": "#/components/schemas/ChoiceCategory"
            }
          },
          "tax": {
            "type": "number",
            "description": "The tax rate on this choice's price as a percentage."
          },
          "price_changes": {
            "type": "object",
            "description": "A map of price changes for this option based on the selection from another option; for example, the price of toppings on a pizza may change depending on the size of pizza selected. The String portion of the map is the ID number of the individual choice selections."
          },
          "sequence": {
            "type": "integer",
            "description": "The order in which this option displays with the other options in this choice category."
          },
          "defaulted": {
            "type": "boolean",
            "description": "Indicated whether this choice option is automatically selected by default."
          }
        },
        "description": "A single option in a series of choices for a menu item."
      },
      "ClaimResponse": {
        "type": "object",
        "properties": {
          "ud_id": {
            "type": "string",
            "description": "A universally unique identifier for this claim associated with this diner."
          },
          "claim_id": {
            "type": "string",
            "description": "A unique identifier for this claim as applied to all diners."
          },
          "claim": {
            "type": "string",
            "description": "The name of the claim."
          },
          "claim_type": {
            "type": "string",
            "description": "Whether this claim applies to the diner on a \"permanent\" or \"temporary\" per-session basis."
          }
        },
        "description": "Information about a security claim. This information is only relevant to internal Grubhub systems; you can ignore it freely."
      },
      "Coupon": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A universally unique identifier for this coupon.",
            "format": "uuid"
          },
          "coupon_id": {
            "type": "string",
            "description": "A text identifier for this coupon."
          },
          "description": {
            "type": "string",
            "description": "A human-readable explanation of what this coupon is and how it affects the cart."
          },
          "amount": {
            "type": "integer",
            "description": "The total amount, in cents, that this coupon discounts the cart total."
          },
          "restaurant_id": {
            "type": "string",
            "description": "The identifier of the restaurant for which this coupon applies."
          },
          "minimum_amount": {
            "type": "integer",
            "description": "The minimum cart amount needed to apply this coupon to the cart total."
          }
        },
        "description": "A coupon that applies to a cart, possibly lowering the price or including a free item."
      },
      "Courier": {
        "required": [
          "geo",
          "id",
          "name",
          "phone",
          "photoUrl",
          "vehicle"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique ID that Grubhub has assigned to the courier.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The first name and last initial of the courier."
          },
          "vehicle": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Vehicle"
              },
              {
                "description": "The method of transportation that the courier is using, including a description."
              }
            ]
          },
          "phone": {
            "type": "string",
            "description": "A phone number that may be used to contact the courier. Do not distribute to diners. Do not print on receipts."
          },
          "photoUrl": {
            "type": "string",
            "description": "URL to retrieve a photo of the courier for display to the restaurant.",
            "format": "url"
          },
          "geo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GeoLocation"
              },
              {
                "description": "The current location of the courier. Updated approximately every 60 seconds."
              }
            ]
          }
        },
        "description": "A courier (driver, biker, etc.) that has been assigned to fulfill a delivery."
      },
      "CredentialResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email address of the logged-in diner."
          },
          "gh_login_id": {
            "type": "string",
            "description": "An internal identifier for this user in the authorization framework."
          },
          "first_name": {
            "type": "string",
            "description": "The diner's first name."
          },
          "last_name": {
            "type": "string",
            "description": "The diner's last name."
          },
          "brand": {
            "type": "string",
            "description": "The brand identifier for this diner. The brand depends on the application that created the diner. For most integrations, this will be \"GRUBHUB\". Diners of one brand cannot order food using an application of another brand."
          },
          "ud_id": {
            "type": "string",
            "description": "The diner ID for this user, which can be used to retrieve previous orders and favorites."
          },
          "created_date": {
            "type": "string",
            "description": "The date that this diner account was created, encoded as Unix epoch time."
          },
          "disable_password": {
            "type": "boolean",
            "description": "Whether the diner needs a password to login."
          }
        },
        "description": "Information about the diner whose credentials are being used to log in."
      },
      "Delivery": {
        "required": [
          "account_id",
          "collected_tip",
          "contents",
          "cost",
          "created",
          "dropoff",
          "id",
          "name",
          "pickup",
          "status",
          "times"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique Grubhub ID for the delivery.",
            "format": "uuid"
          },
          "account_id": {
            "type": "string",
            "description": "The business account ID that was used to create the delivery",
            "format": "uuid"
          },
          "confirmation_code": {
            "type": "string",
            "description": "A Grubhub 6-character code for referencing the delivery by humans. This should be displayed to the end user for reference when calling in to Grubhub customer care. It is also provided to the driver."
          },
          "trip_id": {
            "type": "string",
            "description": "The unique Grubhub ID for the trip containing this delivery. Deliveries may be batched together into a single trip. A trip is offered to and accepted by a courier.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Short text description for the delivery (typically, the name of the diner or delivery recipient)."
          },
          "pickup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Location"
              },
              {
                "description": "The location where the contents of the delivery will be picked up."
              }
            ]
          },
          "dropoff": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Location"
              },
              {
                "description": "The location where the contents of the delivery will be dropped off."
              }
            ]
          },
          "flags": {
            "type": "array",
            "description": "A set of flags describing certain attributes of the delivery that may impact dispatch handling.",
            "items": {
              "$ref": "#/components/schemas/DeliveryFlag"
            }
          },
          "contents": {
            "type": "array",
            "description": "A list of items that are being delivered.",
            "items": {
              "$ref": "#/components/schemas/DeliveryItem"
            }
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeliveryStatus"
              },
              {
                "description": "The current status of the delivery."
              }
            ]
          },
          "courier": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Courier"
              },
              {
                "description": "The courier (driver, biker, etc.) that is currently assigned to the delivery. May change over time."
              }
            ]
          },
          "created": {
            "type": "string",
            "description": "Date and time the delivery was created.",
            "format": "date-time"
          },
          "pickup_ready": {
            "type": "string",
            "description": "When the order was marked as ready to be picked up. Will be absent if null.",
            "format": "date-time"
          },
          "times": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeliveryTimes"
              },
              {
                "description": "Pickup and dropoff estimate or actual times. Estimates are updated approximately every 60 seconds. After a pickup or dropoff event has occurred, actual times are returned instead of estimates."
              }
            ]
          },
          "committed_times": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeliveryTimes"
              },
              {
                "description": "Pickup and dropoff times as they were at the time the delivery was committed."
              }
            ]
          },
          "cost": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MoneyAmount"
              },
              {
                "description": "The total cost of the delivery charged by Grubhub."
              }
            ]
          },
          "collected_tip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MoneyAmount"
              },
              {
                "description": "Tip collected by the delivery client to be paid out to the Grubhub driver."
              }
            ]
          },
          "total": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MoneyAmount"
              },
              {
                "description": "Total price of the order to the diner."
              }
            ]
          },
          "preferences": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeliveryPreferences"
              },
              {
                "description": "Set of preferred details about a delivery."
              }
            ]
          },
          "metadata": {
            "type": "object",
            "description": "String map of client-supplied metadata for the delivery. Both internal Grubhub systems and partner systems may provide metadata, so it is advised to implement a namespacing convention for partner-supplied keys."
          },
          "setup_instructions": {
            "type": "string",
            "description": "Not currently supported through DaaS. Special instructions to the courier for delivery setup. Absent if null."
          },
          "alternate_name": {
            "type": "string",
            "description": "An optional alternate contact name."
          },
          "alternate_phone": {
            "type": "string",
            "description": "An optional alternate contact phone number."
          }
        },
        "description": "A delivery that has been created as the result of a delivery request."
      },
      "DeliveryFlag": {
        "type": "string",
        "description": "Specifies an attribute of the delivery, which may affect dispatch handling.",
        "example": "ALCOHOL"
      },
      "DeliveryInfo": {
        "type": "object",
        "properties": {
          "street_address1": {
            "type": "string",
            "description": "The primary street address."
          },
          "cross_streets": {
            "type": "string",
            "description": "The nearest cross street to the street address."
          },
          "street_address2": {
            "type": "string",
            "description": "Additional address information, such as apartment number."
          },
          "address_locality": {
            "type": "string",
            "description": "The city, town, or other locality in which this address is located."
          },
          "address_region": {
            "type": "string",
            "description": "The state or other region in which this address is located."
          },
          "postal_code": {
            "type": "string",
            "description": "The ZIP Code or Postcode of the address.",
            "format": "zipcode"
          },
          "delivery_instructions": {
            "type": "string",
            "description": "Any delivery instructions provided by the diner."
          },
          "name": {
            "type": "string",
            "description": "The diner name. Used to verify the order upon delivery."
          },
          "phone": {
            "type": "string",
            "description": "The contact phone number for the diner.",
            "format": "phone"
          },
          "email": {
            "type": "string",
            "description": "The contact email address for the diner.",
            "format": "email"
          },
          "address_country": {
            "type": "string",
            "description": "The country in which this address is located."
          },
          "green_indicated": {
            "type": "boolean",
            "description": "Whether the diner has indicated that they want the restaurant to not include plastic silverware in order to save the environment."
          },
          "latitude": {
            "type": "string",
            "description": "The latitude of the address."
          },
          "longitude": {
            "type": "string",
            "description": "The longitude of the address."
          }
        },
        "description": "Information on how to deliver this order to the diner."
      },
      "DeliveryItem": {
        "required": [
          "description"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the item being delivered. Typically, the menu item name."
          },
          "size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeliveryItemSize"
              },
              {
                "description": "The size of the item. Not currently utilized."
              }
            ]
          },
          "tags": {
            "type": "array",
            "description": "Specifies attributes of an item, which may affect dispatch handling. Note that any client-supplied values are permissible, but only those in the DeliveryFlag enumeration will result in a delivery-level flag, which actually affects dispatch behavior.",
            "items": {
              "$ref": "#/components/schemas/DeliveryFlag"
            }
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of the item. Default is 1."
          }
        },
        "description": "An item within the contents of a delivery."
      },
      "DeliveryItemSize": {
        "type": "string",
        "description": "Size of an item.",
        "example": "XXL"
      },
      "DeliveryPreferences": {
        "type": "object",
        "properties": {
          "pickup_time": {
            "type": "string",
            "description": "The desired time for a driver to arrive at the pickup location. This influences dispatching, but is not guaranteed to be respected precisely.",
            "format": "date-time"
          },
          "delivery_time": {
            "type": "string",
            "description": "The desired time for a driver to arrive at the dropoff location. This influences dispatching, but is not guaranteed to be respected precisely.",
            "format": "date-time"
          }
        },
        "description": "A set of preferred details about a delivery."
      },
      "DeliveryStatus": {
        "type": "string",
        "description": "Status of the delivery. Most of these statuses will only return for Grubhub-managed deliveries. This will return one of the following strings=> ANTICIPATED - This order has been set to be fulfilled at a future time, so it has not begun preparation. ESTIMATED - This order has not yet been checked out by the diner, so it has not even been paid for. The numbers given are an estimate provided so that the diner can make a decision with complete information. COMMITTED - The restaurant has accepted the order and is starting to prepare the food. ASSIGNED - A trip offer has been sent to prospective couriers. Once a courier accepts the offer, they will arrive at the restaurant close to the promised fulfillment time to pick up the food. PICKUP_READY - The restaurant has completed preparing the food, so the driver should be there soon to pick it up and deliver it to the diner. IN_TRANSIT - The driver has picked up the food and is on their way to deliver it to the diner. DELIVERED - The driver has handed the food off to the diner and thus completed the delivery. CANCELED - The delivery order has been canceled and will not be taken to the diner. This delivery can be considered finished."
      },
      "DeliveryTime": {
        "required": [
          "timestamp",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeliveryTimeType"
              },
              {
                "description": "Whether or not this is an estimated or actual time."
              }
            ]
          },
          "timestamp": {
            "type": "string",
            "description": "The time that an event occurred.",
            "format": "date-time"
          }
        },
        "description": "Estimated or actual time that a delivery event will or has taken place."
      },
      "DeliveryTimes": {
        "required": [
          "dropoff",
          "pickup"
        ],
        "type": "object",
        "properties": {
          "pickupArrival": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeliveryTime"
              },
              {
                "description": "Estimated time that the courier will arrive at the pickup location."
              }
            ]
          },
          "pickup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeliveryTime"
              },
              {
                "description": "Estimated or actual time the courier will or did leave at the pickup location with the order."
              }
            ]
          },
          "dropoffArrival": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeliveryTime"
              },
              {
                "description": "Estimated time the courier will arrive at the delivery location."
              }
            ]
          },
          "dropoff": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeliveryTime"
              },
              {
                "description": "Estimated or actual time the courier will or did complete the delivery."
              }
            ]
          },
          "geofencePickupArrival": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeliveryTime"
              },
              {
                "description": "Actual time that the courier entered into the pickup location defined by the geolocation coordinates. If this has not occurred, object will return null; no estimates will be provided."
              }
            ]
          },
          "geofenceDropoffArrival": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeliveryTime"
              },
              {
                "description": "Actual time that the courier entered into the delivery location defined by the geolocation coordinates. If this has not occurred, object will return null; no estimates will be provided."
              }
            ]
          }
        },
        "description": "Estimated or actual times for pickup and drop off of a delivery."
      },
      "DeliveryTimeType": {
        "type": "string",
        "description": "Whether a time is \"estimate\" or \"actual\".",
        "example": "estimate"
      },
      "DinerInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the diner.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The full name of the diner."
          },
          "email": {
            "type": "string",
            "description": "The email address that will be used to log the diner in and communicate order status changes.",
            "format": "email"
          },
          "phone": {
            "type": "string",
            "description": "The diner's phone number, which restaurants and drivers will receive in order to coordinate delivery and communicate any issues.",
            "format": "phone"
          }
        },
        "description": "Information about a diner associated with an order or cart."
      },
      "FavoriteRestaurant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "An identifier for this favorite. This is not the restaurant ID"
          },
          "restaurant_id": {
            "type": "string",
            "description": "The unique ID of the favorited restaurant."
          },
          "create_time": {
            "type": "string",
            "description": "The time on which this restaurant was added to the diner's favorites.",
            "format": "timestamp"
          }
        },
        "description": "A restaurant that a diner has favorited along with the time that they favorited it."
      },
      "FreeMenuItemParts": {
        "type": "object",
        "properties": {
          "menu_item_id": {
            "type": "string",
            "description": "The ID of the menu item that the diner can add for free."
          }
        },
        "description": "Information about a menu item that the diner can add to their cart for free."
      },
      "FulfillmentEstimate": {
        "type": "object",
        "properties": {
          "time": {
            "type": "string",
            "description": "The lower bound time that the order is estimated to be fullfilled.",
            "format": "date-time"
          },
          "maxTime": {
            "type": "string",
            "description": "The upper bound time that the order is estimated to be fullfilled.",
            "format": "date-time"
          }
        },
        "description": "The estimated minimum and maximum time for fullfilment according to the selected fullfillment method."
      },
      "FulfillmentInfo": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of order fulfillment associate with this order. Either \"DELIVERY\" or \"PICKUP\"."
          },
          "delivery_info": {
            "$ref": "#/components/schemas/DeliveryInfo"
          },
          "pickup_info": {
            "$ref": "#/components/schemas/PickupInfo"
          },
          "incomplete_delivery": {
            "$ref": "#/components/schemas/IncompleteDelivery"
          },
          "incomplete_pickup": {
            "type": "object",
            "description": "An empty object used to indicate that the cart is for a pickup order without providing pickup information about the diner."
          }
        },
        "description": "Information about how to delivery or handle pickup for the current order."
      },
      "FutureOrderAvailability": {
        "type": "object",
        "properties": {
          "order_send_time_delivery": {
            "type": "string",
            "description": "The time (in UTC time) on which an order must be sent in order for a restaurant to prepare and deliver it before they close.",
            "format": "date-time"
          },
          "open_order_send_time_delivery": {
            "type": "boolean",
            "description": "Whether the restaurant is open at the time specified in `order_send_time_delivery`."
          },
          "order_send_time_pickup": {
            "type": "string",
            "description": "The time (in UTC time) on which an order must be sent in order for a restaurant to prepare it for a diner to pickup before they close.",
            "format": "date-time"
          },
          "open_order_send_time_pickup": {
            "type": "boolean",
            "description": "Whether the restaurant is open at the time specified in `order_send_time_pickup`."
          }
        },
        "description": "Information about the availability of orders scheduled for fulfillment at a future time."
      },
      "GeoLocation": {
        "required": [
          "lat",
          "lng"
        ],
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "description": "Latitude coordinate"
          },
          "lng": {
            "type": "number",
            "description": "Longitude coordinate"
          }
        },
        "description": "Latitude and longitude for a location."
      },
      "IncompleteDelivery": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "string",
            "description": "The latitude coordinate of the delivery address."
          },
          "longitude": {
            "type": "string",
            "description": "The longitude coordinate of the delivery address."
          }
        },
        "description": "Incomplete delivery information that will still allow the driver to reach the diner."
      },
      "ListFavoriteRestaurantResponse": {
        "type": "object",
        "properties": {
          "favorite_restaurants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FavoriteRestaurant"
            }
          }
        },
        "description": "An array that contains a diner's favorited restaurants and when they favorited those restaurants."
      },
      "Location": {
        "required": [
          "address",
          "name",
          "phone"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier that the requesting client can set to help identify where deliveries can be batched."
          },
          "name": {
            "type": "string",
            "description": "A short description of the location. Typically, the restaurant name and parenthetical location identifier for pickup locations. E.g., \"Brian's Diner (on Clark St.)\"."
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "description": "The physical address of the location."
              }
            ]
          },
          "phone": {
            "type": "string",
            "description": "Telephone number for contacting the location.",
            "format": "phone"
          },
          "notes": {
            "type": "string",
            "description": "Special instructions for access to the location. E.g., \"Park in the alley\" or \"Buzz"
          },
          "geo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GeoLocation"
              },
              {
                "description": "Latitude and longitude of this location"
              }
            ]
          }
        },
        "description": "Geographic and contact details for where delivery contents will be picked up or dropped off."
      },
      "MenuItem": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "A UUID identifier for this menu item.",
            "format": "uuid"
          },
          "id": {
            "type": "string",
            "description": "The unique identifier of this item on the restaurant menu."
          },
          "menu_category_name": {
            "type": "string",
            "description": "The display name of the menu category."
          },
          "menu_category_id": {
            "type": "integer",
            "description": "The ID of the category in which this menu item can be found on this restaurant's menu."
          },
          "name": {
            "type": "string",
            "description": "The display name of the menu item."
          },
          "description": {
            "type": "string",
            "description": "A restaurant-provided description of the menu item."
          },
          "price": {
            "$ref": "#/components/schemas/Price"
          },
          "tax": {
            "type": "number",
            "description": "The amount of tax on the item in cents."
          },
          "tax_rate": {
            "$ref": "#/components/schemas/TaxRate"
          },
          "minimum_cart_total": {
            "$ref": "#/components/schemas/Price"
          },
          "sequence": {
            "type": "integer",
            "description": "The order in which this menu item displays within its category."
          },
          "minimum_price_variation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Price"
              },
              {
                "description": "The minimum amount that this menu item will vary based on diner choices."
              }
            ]
          },
          "delivery_minimum_price_variation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Price"
              },
              {
                "description": "The minimum amount that this menu item will vary based on diner choices within delivery orders"
              }
            ]
          },
          "pickup_minimum_price_variation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Price"
              },
              {
                "description": "The minimum amount that this menu item will vary based on diner choices within pickup orders."
              }
            ]
          },
          "maximum_price_variation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Price"
              },
              {
                "description": "The maximum amount that this menu item will vary based on diner choices."
              }
            ]
          },
          "delivery_maximum_price_variation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Price"
              },
              {
                "description": "The maximum amount that this menu item will vary based on diner choices within delivery orders."
              }
            ]
          },
          "pickup_maximum_price_variation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Price"
              },
              {
                "description": "The maximum amount that this menu item will vary based on diner choices within delivery orders."
              }
            ]
          },
          "available": {
            "type": "boolean",
            "description": "Whether this item is currenly available to order"
          },
          "available_future_order_send_time_delivery": {
            "type": "boolean",
            "description": "Whether this item is available to order for delivery at the time specified if future ordering has been indicated."
          },
          "available_future_order_send_time_pickup": {
            "type": "boolean",
            "description": "Whether this item is available to order for pickup at the time specified if future ordering has been indicated."
          },
          "choice_category_list": {
            "type": "array",
            "description": "The categories of choices that a diner must make in order to add this menu item to their cart.",
            "items": {
              "$ref": "#/components/schemas/ChoiceCategory"
            }
          },
          "allowable_order_types": {
            "type": "array",
            "description": "The types of orders that this menu item can be added to. Possible order types are \"standard\", \"catering\", and \"group\".",
            "items": {
              "type": "string"
            }
          },
          "menu_item_features": {
            "type": "array",
            "description": "V3 only. The advanced menu item features, such as extended choices and modifiers, that this menu item utilizes. Possible values are CHOICE_CATEGORY_QUANTITIES, CHOICE_OPTION_QUANTITIES, CHOICE_OPTION_DEFAULTS, MENU_ITEM_COMBOS, CHOICE_OPTION_MEDIA, and SUBCATEGORIES.",
            "items": {
              "type": "string"
            }
          },
          "menu_item_blackout": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MenuItemBlackout"
              },
              {
                "description": "Information about when a menu item is temporarily unavailable"
              }
            ]
          },
          "popular": {
            "type": "boolean",
            "description": "Whether this item is among the most popular items in this restaurant."
          },
          "has_required_choices": {
            "type": "boolean",
            "description": "Whether the diner has selected the required choices for this menu item."
          }
        },
        "description": "Information about an item on a menu, including price, choices, and availability."
      },
      "MenuItemBlackout": {
        "type": "object",
        "properties": {
          "menu_item_id": {
            "type": "integer",
            "description": "The identifer of the menu item affected.",
            "format": "int64"
          },
          "start_date_in_utc": {
            "type": "string",
            "description": "The date and time when this menu item starts being unavailable.",
            "format": "date-time"
          },
          "end_date_in_utc": {
            "type": "string",
            "description": "The date and time when this item becomes available again.",
            "format": "date-time"
          }
        },
        "description": "Information about when a menu item is not available during normal availability hours."
      },
      "MoneyAmount": {
        "required": [
          "amount"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Value of the amount in the smallest unit of currency. (E.g., cents for USD)."
          },
          "currency": {
            "type": "string",
            "description": "ISO standard currency indicator. Default to USD."
          }
        },
        "description": "An amount of money. Includes an amount and currency type. The amount is an integer value of the indivisible unit of a currency (e.g., cents for USD)."
      },
      "NextOpenClosedContainer": {
        "type": "object",
        "properties": {
          "next_order_send_time_delivery": {
            "type": "string",
            "description": "The next time that an order can be sent to this restaurant for delivery. The restaurant will need time after this to prepare and deliver the order.",
            "format": "date-time"
          },
          "next_order_send_time_pickup": {
            "type": "string",
            "description": "The next time that an order can be sent to this restaurant for pickup. The restaurant will need time after this to prepare the order.",
            "format": "date-time"
          },
          "next_delivery_time": {
            "type": "string",
            "description": "The next estimated time that an order can be fulfilled by delivery. If a restaurant is currently open, this value will be the current time (in UTC) plus the value of `delivery_estimate`.",
            "format": "date-time"
          },
          "next_pickup_time": {
            "type": "string",
            "description": "The next estimated time that an order can be fulfilled by pickup. If a restaurant is currently open, this value will be the current time (in UTC) plus the value of `pickup_estimate`.",
            "format": "date-time"
          },
          "next_cutoff_order_send_time_delivery": {
            "type": "string",
            "description": "The next time that a restaurant will stop accepting delivery orders.",
            "format": "date-time"
          },
          "next_cutoff_order_send_time_pickup": {
            "type": "string",
            "description": "The next time that a restaurant will stop accepting pickup orders.",
            "format": "date-time"
          },
          "order_tiers": {
            "type": "array",
            "description": "Next open/close information for orders above certain value thresholds, which allows restaurants to indicate that they need a little extra time to prepare larger orders. Next times presented to diners should be based on the largest threshold that their order has passed.",
            "items": {
              "$ref": "#/components/schemas/NextOpenClosedContainerTier"
            }
          }
        },
        "description": "Information about when this restaurant will be able to next fulfill orders. Generally used to manage future orders. NOTE - Any of these fields could return an empty value if you have reached your availability check limit."
      },
      "NextOpenClosedContainerTier": {
        "type": "object",
        "properties": {
          "threshold_type": {
            "type": "string",
            "description": "The type of threshold described by this ordering tier. This will be one of `ORDER_AMOUNT_CENTS` or `UNKNOWN`."
          },
          "threshold": {
            "type": "integer",
            "description": "The value of the threshold in cents."
          },
          "additional_prep_time_minutes": {
            "type": "integer",
            "description": "The amount of extra time over the original delivery and pickup estimates that this tier needs to prepare orders."
          },
          "next_delivery_time": {
            "type": "string",
            "description": "The next estimated time that an order of this tier can be fulfilled by delivery. If a restaurant is currently open, this value will be the current time (in UTC) plus the value of `delivery_estimate` plus `additional_prep_time_minutes`.",
            "format": "date-time"
          },
          "next_order_send_time_delivery": {
            "type": "string",
            "description": "The next time that an order of this tier can be sent to this restaurant for delivery. The restaurant will need time after this to prepare and deliver the order.",
            "format": "date-time"
          },
          "next_pickup_time": {
            "type": "string",
            "description": "The next estimated time that an order of this tier can be fulfilled by pickup. If a restaurant is currently open, this value will be the current time (in UTC) plus the value of `pickup_estimate` plus `additional_prep_time_minutes`.",
            "format": "date-time"
          },
          "next_order_send_time_pickup": {
            "type": "string",
            "description": "The next time that an order of this tier can be sent to this restaurant for pickup. The restaurant will need time after this to prepare the order.",
            "format": "date-time"
          }
        },
        "description": "A single tier of next open/close information for orders above a value threshold and the extra time they need to prepare that order. Next times presented to diners should be based on the largest threshold that their order has passed."
      },
      "NotificationPreferences": {
        "type": "object",
        "properties": {
          "channels": {
            "type": "object",
            "description": "The diner's notification preferences, mapped by the type of channel."
          },
          "system": {
            "type": "string",
            "description": "The method used to notify the diner."
          }
        },
        "description": "How the diner prefers to be notified about their order."
      },
      "OpenidTokenResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "An OAuth2-compliant token that grants access. If this token comes from the Grubhub API servers, then it must be passed in the headers of every Grubhub API request."
          },
          "token_type": {
            "type": "string",
            "description": "The type of token. This will always be \"Bearer\", which must be indicated in all API request headers."
          },
          "expires_in": {
            "type": "integer",
            "description": "The number of seconds before the access token will no longer grant API access."
          },
          "refresh_token": {
            "type": "string",
            "description": "A token that you can use to refresh this access token. By default, this token remains valid for 43200 minutes."
          },
          "id_token": {
            "type": "string",
            "description": "The Openid token that identifies the individual user on your site to the Grubhub API."
          }
        },
        "description": "An Openid token and access token that can used to make requests against the Grubhub API."
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the order",
            "format": "uuid"
          },
          "time_placed": {
            "type": "string",
            "description": "The date and time when this order was placed.",
            "format": "date-time"
          },
          "start_time": {
            "type": "string",
            "description": "The date and timed on which the diner began this order.",
            "format": "date-time"
          },
          "is_asap": {
            "type": "boolean",
            "description": "Whether this order was requested to be fulfilled as soon as possible."
          },
          "currency": {
            "type": "string",
            "description": "The currency in which the prices and other costs are valued in."
          },
          "diner_info": {
            "$ref": "#/components/schemas/DinerInfo"
          },
          "fulfillment_info": {
            "$ref": "#/components/schemas/FulfillmentInfo"
          },
          "order_number": {
            "type": "integer",
            "description": "A number given to identify the order to the restaurant. This differs from the order ID, which is a unique UUID in the Grubhub system."
          },
          "state": {
            "type": "string",
            "description": "The current state of this order within the fulfillment pipeline."
          },
          "order_tracking": {
            "$ref": "#/components/schemas/OrderTracking"
          },
          "payments": {
            "$ref": "#/components/schemas/OrderPayments"
          },
          "charges": {
            "$ref": "#/components/schemas/OrderCharges"
          },
          "restaurant": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Restaurant"
            }
          },
          "when_for": {
            "type": "string",
            "description": "The date and time which this order was expected to be ready."
          },
          "fulfillment_estimate": {
            "$ref": "#/components/schemas/FulfillmentEstimate"
          },
          "system_of_record": {
            "type": "string",
            "description": "The primary ordering system in which this order is tracked."
          }
        },
        "description": "Information about a previously placed order."
      },
      "OrderCharges": {
        "type": "object",
        "properties": {
          "diner_subtotal": {
            "type": "integer",
            "description": "The total of all menu items added to this cart before fees and taxes."
          },
          "fees": {
            "$ref": "#/components/schemas/OrderFees"
          },
          "taxes": {
            "$ref": "#/components/schemas/OrderTaxes"
          },
          "tip": {
            "$ref": "#/components/schemas/Tip"
          },
          "diner_grand_total": {
            "type": "integer",
            "description": "The total amount of the bill for this order, including menu items, taxes, fees, and tip."
          },
          "lines": {
            "$ref": "#/components/schemas/OrderLines"
          }
        },
        "description": "The charges associated with an existing order."
      },
      "OrderEvent": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/Status"
          },
          "event_time": {
            "type": "string",
            "description": "The time that this status change occurred.",
            "format": "date-time"
          }
        },
        "description": "A time-stamped status change event associated with an order."
      },
      "OrderEventList": {
        "type": "object",
        "properties": {
          "estimate_start_time": {
            "type": "string",
            "description": "The beginning of the estimated fulfillment time range. This value is not a guarantee, and the actual fulfillment could fall outside of this range.",
            "format": "date-time"
          },
          "estimate_end_time": {
            "type": "string",
            "description": "The end of the estimated fulfillment time range. This value is not a guarantee, and the actual fulfillment could fall outside of this range.",
            "format": "date-time"
          },
          "expected_delivery_time": {
            "type": "string",
            "description": "The time within this range we estimate that the order will be fulfilled.",
            "format": "date-time"
          },
          "order_events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderEvent"
            }
          }
        },
        "description": "Estimated time that an order will be fulfilled, as well as time-stamped events related to that order."
      },
      "OrderFees": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total amount of fees to add to an order, in cents."
          },
          "delivery": {
            "type": "integer",
            "description": "The fee for delivery."
          }
        },
        "description": "Information about the delivery and other fees that apply to an order."
      },
      "OrderHistoryResponse": {
        "type": "object",
        "properties": {
          "orders": {
            "type": "array",
            "description": "Information about a single order.",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          }
        },
        "description": "Full details about an order as returned from an order's request."
      },
      "OrderLines": {
        "type": "object",
        "properties": {
          "line_items": {
            "$ref": "#/components/schemas/CartLine"
          }
        },
        "description": "A break down of each menu item line within a completed order."
      },
      "OrderPayments": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total amount covered by the payments in the 'payments' array."
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Payment"
            }
          }
        },
        "description": "The payments applied to this order and the total amount that they covered."
      },
      "OrderTaxes": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total taxes appied to an order in cents."
          },
          "sales": {
            "type": "integer",
            "description": "The amount of sales taxes applied to a cart in cents."
          },
          "delivery": {
            "type": "integer",
            "description": "The taxes related to delivery applied to a cart."
          }
        },
        "description": "Information about the taxes applied to an order."
      },
      "OrderTracking": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether this order is able to be tracked."
          }
        },
        "description": "Information about whether this order is tracked."
      },
      "Payment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID value that identifies this payment as attached to a specific order."
          },
          "type": {
            "type": "string",
            "description": "The type of payment; one of either \"CREDIT_CARD\", \"PAYPAL_EXPRESS\", or \"AMEX_EXPRESS\"."
          },
          "amount": {
            "type": "integer",
            "description": "The amount of the order bill that this payment covers."
          }
        },
        "description": "Information about a single payment attached to an order."
      },
      "PickupInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the diner picking up the order."
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the diner."
          },
          "email": {
            "type": "string",
            "description": "The email address of the diner.",
            "format": "email"
          },
          "pickup_instructions": {
            "type": "string",
            "description": "Any instructions that the diner has provided to the restaurant for pickup."
          },
          "green_indicated": {
            "type": "boolean",
            "description": "Whether the diner has indicated that they do not want plastic utensils with their food."
          }
        },
        "description": "Information required to arrange pickup with the diner."
      },
      "Price": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The amount currency that this price adds."
          },
          "currency": {
            "type": "string",
            "description": "The currency unit applied to the price value."
          }
        },
        "description": "A price structure that indicates an amount - usually in cents or the smallest value in a currency - and the currency to use."
      },
      "RecommendedTipSettings": {
        "type": "object",
        "properties": {
          "minimum_tip_amount": {
            "type": "integer",
            "description": "The minimum recommended amount of tip (in cents) to apply to this order."
          },
          "minimum_tip_percentage": {
            "type": "number",
            "description": "The minimum percentage of the total order to add as a tip.",
            "format": "double"
          }
        },
        "description": "The tip amount and percentage that we recommend you apply to this order."
      },
      "ResourceCreateResponse": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the newly created resource (cart, cart line, payment, etc.)."
          },
          "uri": {
            "type": "string",
            "description": "The URI that you can use as a RESTful endpoint to affect this cart / payment resource.",
            "format": "uri",
            "example": "/carts/Lbr1EIaxEeeIgUXKh-lZqg"
          },
          "already_exists": {
            "type": "boolean",
            "description": "Indicates whether this resource already has been created."
          }
        },
        "description": "A new cart or payment related resource."
      },
      "Restaurant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifer for this restaurant."
          },
          "name": {
            "type": "string",
            "description": "The display name of the restaurant."
          },
          "img_url": {
            "type": "string",
            "description": "The URL of the image used to represent this restaurant.",
            "format": "url"
          }
        },
        "description": "Information about a single restaurant."
      },
      "RestaurantAvailability": {
        "type": "object",
        "properties": {
          "restaurant_id": {
            "type": "string",
            "description": "The unique identifier for the restaurant whose availability is shown."
          },
          "delivery_fee": {
            "$ref": "#/components/schemas/Price"
          },
          "delivery_fee_estimate": {
            "$ref": "#/components/schemas/Price"
          },
          "delivery_fee_without_discounts": {
            "$ref": "#/components/schemas/Price"
          },
          "delivery_fee_as_percentage": {
            "type": "number",
            "description": "The delivery fee as a percentage of the total order price."
          },
          "delivery_fee_taxable": {
            "type": "boolean",
            "description": "Indicates whether the fee is subject to state or local taxes."
          },
          "order_minimum": {
            "$ref": "#/components/schemas/Price"
          },
          "sales_tax": {
            "type": "number",
            "description": "The amount of state and local sales tax added to this restaurant's orders."
          },
          "delivery_offered_to_diner_location": {
            "type": "boolean",
            "description": "Indicates whether this restaurant delivers to the diner's current location."
          },
          "open": {
            "type": "boolean",
            "description": "Indicates whether the restaurant is open at the time requested."
          },
          "open_delivery": {
            "type": "boolean",
            "description": "Whether this restaurant is open for delivery at the requested time."
          },
          "open_pickup": {
            "type": "boolean",
            "description": "Whether this restaurant is open for pickup orders at the requested time."
          },
          "available_for_delivery": {
            "type": "boolean",
            "description": "Whether this restaurant is available to take and fulfill delivery orders at the requested time."
          },
          "available_for_pickup": {
            "type": "boolean",
            "description": "Whether this restaurant is available to take and fulfill pickup orders at the requested time."
          },
          "delivery_estimate": {
            "type": "integer",
            "description": "An estimate of the time an order would take to arrive at the diner's location."
          },
          "pickup_estimate": {
            "type": "integer",
            "description": "An estimate of the time an order would take to be ready for pickup."
          },
          "cash_accepted": {
            "type": "boolean",
            "description": "Whether this restaurant accepts cash as a form of payment for Grubhub orders."
          },
          "credit_card_accepted": {
            "type": "boolean",
            "description": "Whether this restaurant accepts credit cards as a form of payment for Grubhub orders."
          },
          "paypal_accepted": {
            "type": "boolean",
            "description": "Whether this restaurant accepts paypal as a form of payment for Grubhub orders."
          },
          "time_zone_id": {
            "type": "string",
            "description": "A text identifier of the time zone in which this restaurant is located."
          },
          "time_zone_offset": {
            "type": "integer",
            "description": "The number of hours that this restaurant's time zone differs from UTC."
          },
          "distance_in_miles": {
            "type": "integer",
            "description": "The distance from the restaurant to the diner's location in hundreths of a mile."
          },
          "decimal_distance_in_miles": {
            "type": "number",
            "description": "The full distance from the restaurant to the diner without rounding.",
            "format": "double"
          },
          "delivery_cutoff": {
            "type": "integer",
            "description": "The number of minutes before the closing time that the restaurant stops accepting delivery orders."
          },
          "pickup_cutoff": {
            "type": "integer",
            "description": "The number of minutes before the closing time that the restaurant stops accepting pickup orders."
          },
          "cutoff_for_delivery": {
            "type": "boolean",
            "description": "Whether the current time is after the cutoff time for delivery."
          },
          "cutoff_for_pickup": {
            "type": "boolean",
            "description": "Whether the current time is after the cutoff time for pickup orders."
          },
          "available_hours": {
            "type": "array",
            "description": "The day-by-day availability of this restaurant.",
            "items": {
              "type": "integer"
            }
          },
          "available_hours_delivery": {
            "type": "array",
            "description": "The day-by-day availability of this restaurant for delivery orders in the local time of the restaurant.",
            "items": {
              "type": "integer"
            }
          },
          "available_hours_pickup": {
            "type": "array",
            "description": "The day-by-day hours when this restaurant accepts pickup orders.",
            "items": {
              "$ref": "#/components/schemas/AvailableHours"
            }
          },
          "future_order_available_hours_delivery": {
            "type": "array",
            "description": "The hours in which the restaurant will be able to deliver a future order, taking into account the open, close, preparation, and delivery time requirements of an order.",
            "items": {
              "$ref": "#/components/schemas/AvailableHours"
            }
          },
          "future_order_available_hours_pickup": {
            "type": "array",
            "description": "The hours in which the restaurant will be able to make a future order available for a diner to pickup, taking into account the open, close, and preparation time requirements of an order.",
            "items": {
              "$ref": "#/components/schemas/AvailableHours"
            }
          },
          "min_delivery_fee": {
            "$ref": "#/components/schemas/Price"
          },
          "future_order_info": {
            "$ref": "#/components/schemas/FutureOrderAvailability"
          },
          "next_open_closed_info": {
            "$ref": "#/components/schemas/NextOpenClosedContainer"
          },
          "blacked_out": {
            "type": "boolean",
            "description": "Whether this restaurant is currently unavailable when it would normally be available."
          },
          "white_in": {
            "type": "boolean",
            "description": "Whether this restaurant is available when it normally would be unavailable."
          },
          "innundated": {
            "type": "boolean",
            "description": "Whether this restaurant is currently not taking new orders due to being overwhelmed by their current workload."
          }
        },
        "description": "Information about a restaurant's hours of operation, delivery range, and taxes and fees."
      },
      "RestaurantAvailabilitySummary": {
        "type": "object",
        "properties": {
          "restaurant_id": {
            "type": "string",
            "description": "The restaurant whose availability information is shown."
          },
          "open": {
            "type": "boolean",
            "description": "Whether this restaurant is currently open."
          },
          "available_for_delivery": {
            "type": "boolean",
            "description": "Whether this restaurant is currently available to fulfill delivery orders."
          },
          "available_for_pickup": {
            "type": "boolean",
            "description": "Whether this restaurant is currently available to fulfill pickup orders."
          },
          "delivery_offered_to_diner_location": {
            "type": "boolean",
            "description": "Whether the diner is within the delivery range of this restaurant."
          },
          "restaurant_name": {
            "type": "string",
            "description": "The display name of this restaurant."
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "description": "The street address where this restaurant mis located."
              }
            ]
          },
          "decimal_distance_in_miles": {
            "type": "number",
            "description": "The distance from this restaurant to the diner's location.",
            "format": "double"
          },
          "logo": {
            "type": "string",
            "description": "The URL for this restaurant's logo image"
          },
          "delivery_estimate": {
            "type": "integer",
            "description": "The time that the Grubhub system estimates that it would take to deliver food from this restaurant to the diner."
          },
          "pickup_estimate": {
            "type": "integer",
            "description": "The time that the Grubhub system estimates that an order would be ready to pickup from this restaurant."
          },
          "order_minimum": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Price"
              },
              {
                "description": "The minimum value of menu items that a diner needs to add to their cart in order to qualify for delivery."
              }
            ]
          },
          "delivery_fee": {
            "description": "The fee added to the diner's cart if they choose to have their food delivered."
          },
          "delivery_cutoff": {
            "type": "integer",
            "description": "The number of minutes before the closing time that the restaurant stops accepting delivery orders."
          },
          "pickup_cutoff": {
            "type": "integer",
            "description": "The number of minutes before the closing time that the restaurant stops accepting pickup orders."
          },
          "future_order_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FutureOrderAvailability"
              },
              {
                "description": "Information about restaurant availability for future orders."
              }
            ]
          },
          "is_cutoff_for_delivery": {
            "type": "boolean",
            "description": "Whether the current time is after the cutoff time for delivery."
          },
          "is_cutoff_for_pickup": {
            "type": "boolean",
            "description": "Whether the current time is after the cutoff time for pickup orders."
          }
        },
        "description": "Information about a restaurant's pickup and delivery information."
      },
      "RestaurantData": {
        "type": "object",
        "properties": {
          "restaurant_availability": {
            "$ref": "#/components/schemas/RestaurantAvailability"
          },
          "restaurant": {
            "$ref": "#/components/schemas/Restaurant"
          }
        },
        "description": "Information about a single restaurant."
      },
      "SessionResponse": {
        "type": "object",
        "properties": {
          "credential": {
            "type": "array",
            "description": "Information about the diner whose credentials are being used to log in.",
            "items": {
              "$ref": "#/components/schemas/CredentialResponse"
            }
          },
          "claims": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClaimResponse"
            }
          }
        },
        "description": "Information about the current logged in user's session."
      },
      "Status": {
        "type": "string",
        "description": "The status of an order as it passes through the Grubhub fulfillment flow. The most common statuses are described below. ANTICIPATED denotes a future order, which may be cancelled by diner. RESTAURANT_CONFIRMABLE is pending confirmation of receipt by the restaurant. These are effectively new ASAP orders. ANTICIPATED orders will automatically become RESTAURANT_CONFIRMABLE at the promise time, less the restaurant's configured pickup or delivery prep time. DINER_CONFIRMABLE is a status held for future use. CONFIRMED denotes that the order was received by restaurant, even if the restaurant is unable to fulfill it. REJECTED is an error status. For example, if an order is unable to be inserted to the POS, due to menu item mismatch, restaurant offline, etc., the status should be updated to REJECTED. This is not to be used when the order was successfully transmitted, but the restaurant is unable to fulfill it for operational reasons. In that scenario, a Change Request should be submitted to cancel the order. CANCELLED means that a cancellation request by the diner or restaurant has been processed by Grubhub Customer Care. PICKUP_READY indicates that the food is prepared and ready for pickup by the diner or a Grubhub delivery courier. OUT_FOR_DELIVERY means the food is on the way to the diner. FULFILLED denotes that the food has been delivered to or picked up by the diner. UNKNOWN is provided for error handling of strings unmappable to known enumeration values. Deprecated statuses will be provided when including a legacyStatus query parameter set to TRUE when polling orders. Similarly, legacy statuses will be translated when passed into the order status update endpoint. Confirmation of legacy status translation should be tested with individual integrations."
      },
      "TaxRate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A human-readable name for this tax rate."
          },
          "rate": {
            "type": "number",
            "description": "The percentage of the menu item's value added to an order as tax."
          },
          "flat": {
            "type": "number",
            "description": "A flat amount added as tax to an order that includes this menu item."
          },
          "includedInItemPrice": {
            "type": "boolean",
            "description": "Whether the tax amount is added to the item's total price or shown as a separate charge."
          }
        },
        "description": "Information about a tax rate associated with a menu item."
      },
      "Tip": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "The total amount of the tip in cents."
          },
          "type": {
            "type": "string",
            "description": "How the tip amount was collected. This will be either \"INCLUDE_IN_BILL\" or \"CASH\"."
          }
        },
        "description": "Information about the tip applied to an order."
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "property": {
            "type": "string",
            "description": "The item that failed validation."
          },
          "message_key": {
            "type": "string",
            "description": "The reason that property failed to validate."
          }
        },
        "description": "The error and description as to why a cart failed to validate for checkout."
      },
      "Vehicle": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VehicleType"
              },
              {
                "description": "The mode of transportation."
              }
            ]
          },
          "description": {
            "type": "string",
            "description": "The make, model, and color of the vehicle, where applicable."
          }
        },
        "description": "A vehicle used by a courier."
      },
      "VehicleType": {
        "type": "string",
        "description": "A mode of transportation.",
        "example": "bike"
      }
    }
  }
}